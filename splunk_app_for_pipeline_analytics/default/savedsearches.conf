[Access - Inactive Account in Development Environment - Rule]
action.correlationsearch.annotations = {"mitre_attack":["T1078"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Inactive Account in Development Environment
action.customsearchbuilder.enabled = false
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable = 1
action.notable.param.drilldown_name = View usage of previously inactive account $user$
action.notable.param.drilldown_search = | inputlookup last_access_by_user  | `set_threshold_for_new_activity` | eval lastrequest=strptime(last_access, "%Y-%m-%dT%H:%M:%S.%3Q%z"), threshold=relative_time(now(), timethreshold),time=now() | where lastrequest < threshold | eval src_user=if(isnull(user), "unknown", user) | lookup identity_lookup_expanded identity as src_user OUTPUTNEW identity | eval is_unknown=if(src_user="unknown" OR isnull(identity), 1, 0) | search is_unknown=0 |
action.notable.param.extract_artifacts = {"asset":["dvc"],"identity":["src_user","user"]}
action.notable.param.rule_description = $count$ request(s) were created by a previously inactive user $src_user$
action.notable.param.rule_title = Inactive Account Usage in Dev Environment
action.notable.param.security_domain = access
action.notable.param.severity = low
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"","risk_object_type":"","risk_score":1}]
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
alert.suppress = 1
alert.suppress.fields = dvc,src_user
alert.suppress.period = 86400s
alert.track = 1
counttype = number of events
cron_schedule = 15 */1 * * *
description = This search will return results of those doing pull requests that are from a known user, but which have not previously accessed the environment in the last threshold defined in the set_threshold_for_new_activity macro
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = | inputlookup last_access_by_user \
| `set_threshold_for_new_activity`\
| eval lastrequest=strptime(last_access, "%Y-%m-%dT%H:%M:%S.%3Q%z"), threshold=relative_time(now(), timethreshold),time=now()\
| where lastrequest < threshold\
| eval src_user=if(isnull(user), "unknown", user)\
| lookup identity_lookup_expanded identity as src_user OUTPUTNEW identity\
| eval is_unknown=if(src_user="unknown" OR isnull(identity), 1, 0)\
| search is_unknown=0\
| stats count values(command) as command values(action) as action by src_user,dvc

[Threat - Dependency Vulnerability Found - Rule]
action.correlationsearch.annotations = {"mitre_attack":["T1195.001"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Dependency Vulnerability Found
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable = 1
action.notable.param.drilldown_search = | pivot Code_Vulnerabilities Vulnerabilities latest(_time) AS latest_time earliest(_time) AS earliest_time SPLITROW category AS category SPLITROW cve AS cve SPLITROW dest AS dest SPLITROW repository_name AS repository_name SPLITROW severity AS severity SPLITROW xref AS xref SPLITROW signature AS signature | `github_dependency_alert_filter` | stats min(earliest_time) as first_detection max(latest_time) as last_detection values(cve) as cves values(xref) as packages count by dest,repository_name
action.notable.param.extract_artifacts = {"asset":["dvc"],"identity":["user"]}
action.notable.param.next_steps = {"version":1,"data":"[[action|risk]]"}
action.notable.param.recommended_actions = risk
action.notable.param.rule_description = $total_vulnerabilities$ dependency vulnerabilities detected in repository $repository_name$
action.notable.param.rule_title = Vulnerability Found in Dependency Package
action.notable.param.security_domain = threat
action.notable.param.severity = high
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk = 1
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"repository_name","risk_object_type":"host_artifacts","risk_score":5},{"risk_object_field":"dest","risk_object_type":"system","risk_score":1}]
action.risk.param._risk_message = Dependency packages with vulnerabilities may affect users, customers, and developer accounts
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = dest,repository_name
alert.suppress.period = 86400s
alert.track = 1
counttype = number of events
cron_schedule = 5 */1 * * *
description = This search looks for Dependency Alerts in Code
disabled = 1
dispatch.earliest_time = -7d
dispatch.latest_time = now
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = | tstats summariesonly=false latest(_time) AS latest_time earliest(_time) AS earliest_time from datamodel=Code_Vulnerabilities.Vulnerabilities by Vulnerabilities.category,Vulnerabilities.cve,Vulnerabilities.dest,Vulnerabilities.repository_name, Vulnerabilities.severity, Vulnerabilities.xref, Vulnerabilities.signature, Vulnerabilities.vendor_product\
| rename "Vulnerabilities.*" as * \
| `dependency_alert_filter`\
| stats min(earliest_time) as first_detection max(latest_time) as last_detection values(cve) as cve values(xref) as xref values(signature) as signature count as total_vulnerabilities by dest,repository_name,vendor_product

[Threat - Code Vulnerability Found - Rule]
action.correlationsearch.annotations = {"mitre_attack":["T1195.002"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Code Vulnerability Found
action.keyindicator.invert = 0
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable = 1
action.notable.param.drilldown_name = View Detected Vulnerabilities
action.notable.param.drilldown_search = | pivot Code_Vulnerabilities Coding_Vulnerabilities latest(_time) AS "_time"  SPLITROW dest SPLITROW category SPLITROW repository_name SPLITROW signature SPLITROW organization SPLITROW xref SPLITROW severity | `code_alert_filter`
action.notable.param.extract_artifacts = {"asset":["dest"],"identity":["user"],"url":["dest"]}
action.notable.param.next_steps = {"version":1,"data":""}
action.notable.param.recommended_actions = email,risk
action.notable.param.rule_description = $total_vulnerabilities$ code vulnerabilities detected in repository $repository_name$
action.notable.param.rule_title = Vulnerability Found in Code Repository
action.notable.param.security_domain = threat
action.notable.param.severity = high
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk = 1
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"repository_name","risk_object_type":"host_artifacts","risk_score":2},{"risk_object_field":"dest","risk_object_type":"system","risk_score":1},{"risk_object_field":"xref","risk_object_type":"other","risk_score":5}]
action.risk.param._risk_message = Code vulnerability represent a risk to users and customers
action.risk.param._risk_object = repository_name
action.risk.param._risk_object_type = other
action.risk.param._risk_score = 5
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = dest,repository_name,organization
alert.suppress.period = 43200s
alert.track = 1
counttype = number of events
cron_schedule = 5 */24 * * *
description = This search looks for Code Alerts in Development
disabled = 1
dispatch.earliest_time = -7d
dispatch.latest_time = now
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = | tstats summariesonly=false latest(_time) AS _time  from datamodel=Code_Vulnerabilities.Coding_Vulnerabilities by Coding_Vulnerabilities.category,Coding_Vulnerabilities.dest,Coding_Vulnerabilities.repository_name,Coding_Vulnerabilities.signature,Coding_Vulnerabilities.organization,Coding_Vulnerabilities.xref,Coding_Vulnerabilities.severity\
| rename "Coding_Vulnerabilities.*" as * \
| `code_alert_filter`\
| stats count as total_vulnerabilities max(_time) as _time values(xref) as xref values(signature) as signature values(severity) as severity by dest,repository_name,organization

[Access - OAuth App Restrictions Disabled - Rule]
action.correlationsearch.annotations = {"mitre_attack":["T1213.003"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = OAuth App Restrictions Disabled
action.customsearchbuilder.enabled = false
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable = 1
action.notable.param.rule_description = The OAuth restrictions have been disabled on $object$
action.notable.param.rule_title = OAuth App Restrictions Disabled
action.notable.param.security_domain = access
action.notable.param.severity = medium
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"","risk_object_type":"","risk_score":1}]
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
alert.suppress = 1
alert.suppress.fields = object
alert.suppress.period = 86400s
alert.track = 1
counttype = number of events
cron_schedule = 5 */1 * * *
description = This is triggered when OAUTH restrictions are disabled on a reposiroty
disabled = 1
dispatch.earliest_time = -30d@d
dispatch.latest_time = now
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = | tstats latest(_time) AS _time  from datamodel=Change where (nodename = All_Changes.Auditing_Changes) (All_Changes.action=disabled) (All_Changes.command="*oauth*")  groupby All_Changes.command, All_Changes.change_type, All_Changes.dvc, All_Changes.action, All_Changes.user,All_Changes.object\
| rename All_Changes.* as *\
| eval src_user=user

[Access - Two Factor Authentication Disabled on Code Repository - Rule]
action.correlationsearch.annotations = {"mitre_attack":["T1213.003"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Two Factor Authentication Disabled on Code Repository
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable = 1
action.notable.param.rule_description = The two factor authentication has been disabled on $object$
action.notable.param.rule_title = Two Factor Authentication Disabled on Code Reposirity
action.notable.param.security_domain = access
action.notable.param.severity = medium
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"","risk_object_type":"","risk_score":1}]
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
alert.suppress = 1
alert.suppress.fields = object
alert.suppress.period = 86400s
alert.track = 1
counttype = number of events
cron_schedule = 5 */1 * * *
description = This is triggered when two factor restrictions are disabled on a repository
disabled = 1
dispatch.earliest_time = -30d@d
dispatch.latest_time = now
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = | tstats latest(_time) AS _time  from datamodel=Change where (nodename = All_Changes.Auditing_Changes) (All_Changes.action=disabled) (All_Changes.command="*two_factor*")  groupby All_Changes.command, All_Changes.change_type, All_Changes.dvc, All_Changes.action, All_Changes.user,All_Changes.object\
| rename All_Changes.* as *\
|eval src_user=user

[Access - Risk Notable - Pull Request from Unknown User - Rule]
action.correlationsearch.annotations = {"mitre_attack":["T1190"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Risk Notable - Pull Request from Unknown User
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable.param.extract_artifacts = {"asset":["dvc"],"identity":["src_user"]}
action.notable.param.rule_description = $count$ pull request(s) were created by an unknown user $src_user$
action.notable.param.rule_title = Pull Request from Unknown User
action.notable.param.security_domain = access
action.notable.param.severity = low
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk = 1
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"dvc","risk_object_type":"system","risk_score":15},{"risk_object_field":"src_user","risk_object_type":"user","risk_score":10}]
action.risk.param._risk_message = $src_user$ has initiated $count$ pull request(s) from previously unused or inactive account on $dvc$
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
alert.suppress = 1
alert.suppress.fields = dvc,src_user
alert.suppress.period = 900s
alert.track = 1
counttype = number of events
cron_schedule = 5 */1 * * *
description = This search will return any results of those doing pull requests that are a new user that is not contained in the identity_framework
disabled = 1
dispatch.earliest_time = -60min
dispatch.latest_time = now
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = | pivot Change Auditing_Changes count(user) as "access_attempts" earliest(_time) AS "first_access" latest(_time) as "last_access" SPLITROW action SPLITROW command SPLITROW user SPLITROW object SPLITROW change_type SPLITROW object_category SPLITROW dvc\
| search action="created" command="pull_request.create"\
| `set_threshold_for_new_activity`\
| fillnull user value="unknown" \
| eval src_user=user\
| lookup identity_lookup_expanded identity as src_user OUTPUTNEW identity\
| eval is_unknown=if(src_user="unknown" OR isnull(identity), 1, 0)\
| search is_unknown=1\
| fields action,command,first_access,last_access,src_user,dvc, access_attempts\
| stats sum(access_attempts) as count values(command) as command values(action) as action by src_user,dvc

[Access - Pull Request from Unknown User - Rule]
action.correlationsearch.annotations = {"mitre_attack":["T1190"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Pull Request from Unknown User
action.customsearchbuilder.enabled = false
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable = 1
action.notable.param.extract_artifacts = {"asset":["dvc"],"identity":["src_user"]}
action.notable.param.rule_description = $count$ pull request(s) were created by an unknown user $src_user$
action.notable.param.rule_title = Pull Request from Unknown User
action.notable.param.security_domain = access
action.notable.param.severity = low
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk = 0
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"dvc","risk_object_type":"system","risk_score":15},{"risk_object_field":"src_user","risk_object_type":"user","risk_score":10}]
action.risk.param._risk_message = $src_user$ has initiated $count$ pull request(s) from previously unused or inactive account on $dvc$
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
alert.suppress = 1
alert.suppress.fields = dvc,src_user
alert.suppress.period = 900s
alert.track = 1
counttype = number of events
cron_schedule = 5 */1 * * *
description = This search will return any results of those doing pull requests that are a new user that is not contained in the identity_framework
disabled = 1
dispatch.earliest_time = -60min
dispatch.latest_time = now
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = | pivot Change Auditing_Changes count(user) as "access_attempts" earliest(_time) AS "first_access" latest(_time) as "last_access" SPLITROW action SPLITROW command SPLITROW user SPLITROW object SPLITROW change_type SPLITROW object_category SPLITROW dvc\
| search action="created" command="pull_request.create"\
| `set_threshold_for_new_activity`\
| fillnull user value="unknown" \
| eval src_user=user\
| lookup identity_lookup_expanded identity as src_user OUTPUTNEW identity\
| eval is_unknown=if(src_user="unknown" OR isnull(identity), 1, 0)\
| search is_unknown=1\
| fields action,command,first_access,last_access,src_user,dvc, access_attempts\
| stats sum(access_attempts) as count values(command) as command values(action) as action by src_user,dvc

[Threat - Risk Threshold Exceeded For Unknown Users Over 24 Hour Period - Rule]
action.correlationsearch.annotations = {"mitre_attack":["T1190"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Risk Threshold Exceeded For Unknown Users Over 24 Hour Period
action.notable = 1
action.notable.param.drilldown_name = View the individual Risk Attributions
action.notable.param.drilldown_search = | from datamodel:"Risk.All_Risk" | search risk_object="$risk_object$" risk_object_type="$risk_object_type$" | `get_correlations` | rename annotations.mitre_attack.mitre_tactic_id as mitre_tactic_id, annotations.mitre_attack.mitre_tactic as mitre_tactic, annotations.mitre_attack.mitre_technique_id as mitre_technique_id, annotations.mitre_attack.mitre_technique as mitre_technique
action.notable.param.extract_artifacts = {"asset":["dest_"],"identity":["user","src_user"]}
action.notable.param.nes_fields = risk_object,risk_object_type
action.notable.param.rule_description = Risk Threshold Exceeded for pull requests by unknown user on repository
action.notable.param.rule_title = 24 hour pull request from unknown user risk threshold exceeded
action.notable.param.security_domain = threat
action.notable.param.severity = high
action.notable.param.verbose = 0
action.risk.param._risk = [{"risk_object_field":"","risk_object_type":"","risk_score":1}]
action.risk.param._risk_score = 0
alert.suppress = 1
alert.suppress.fields = risk_object
alert.suppress.period = 43200s
alert.track = 1
counttype = number of events
cron_schedule = 5 */1 * * *
description = RBA: Risk Threshold exceeded for an object within the previous 24 hours.
disabled = 1
dispatch.earliest_time = -1450m@m
dispatch.latest_time = -10m@m
dispatch.rt_backfill = 1
enableSched = 1
is_visible = 0
quantity = 0
realtime_schedule = 0
relation = greater than
search = | tstats `summariesonly` sum(All_Risk.calculated_risk_score) as risk_score, count(All_Risk.calculated_risk_score) as risk_event_count,values(All_Risk.annotations.mitre_attack.mitre_tactic_id) as annotations.mitre_attack.mitre_tactic_id, dc(All_Risk.annotations.mitre_attack.mitre_tactic_id) as mitre_tactic_id_count, values(All_Risk.annotations.mitre_attack.mitre_technique_id) as annotations.mitre_attack.mitre_technique_id, dc(All_Risk.annotations.mitre_attack.mitre_technique_id) as mitre_technique_id_count, values(All_Risk.tag) as tag, dc(source) as source_count from datamodel=Risk.All_Risk by All_Risk.risk_object,All_Risk.risk_object_type,source\
| `drop_dm_object_name("All_Risk")` \
| search source="*Pull Request from Unknown User*" \
| eval user=if(risk_object_type="user", risk_object, ""),dest=if(risk_object_type="system", risk_object, ""), risk_object=if(risk_object_type="user", "", risk_object)\
| stats sum(risk_event_count) as risk_event_count sum(risk_score) as risk_score values(risk_object) as risk_object values(risk_object_type) as risk_object_type values(user) as src_user values(dest) as dest values(annotations*) as annotations* values(mitre*) as mitre* values(source*) as source*\
| eval "annotations.mitre_attack"='annotations.mitre_attack.mitre_technique_id', risk_threshold=60\
| where risk_score >= $risk_threshold$ \
| `get_risk_severity(risk_score)`

[Access - Repository Permissions Switched to Public - Rule]
action.correlationsearch.annotations = {"mitre_attack":["T1213.003"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Repository Permissions Switched to Public
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable = 1
action.notable.param.extract_artifacts = {"asset":["dest"],"identity":["src_user"]}
action.notable.param.rule_description = The repository $object$ at $dest$ has had its permissions switched to public
action.notable.param.rule_title = Repository Permissions Switched to Public
action.notable.param.security_domain = access
action.notable.param.severity = medium
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"","risk_object_type":"","risk_score":1}]
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
alert.suppress = 1
alert.suppress.fields = dest,object
alert.suppress.period = 86400s
alert.track = 1
counttype = number of events
cron_schedule = 5 */1 * * *
description = This alert is trigged when a change is made to a repository to make it public
disabled = 1
dispatch.earliest_time = -14d@d
dispatch.latest_time = now
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = | tstats latest(_time) AS _time  from datamodel=Change where (nodename = All_Changes.Auditing_Changes) (All_Changes.object_category="repository") (All_Changes.command="*access*") (All_Changes.action="access") groupby All_Changes.command, All_Changes.change_type, All_Changes.dvc, All_Changes.action, All_Changes.user,All_Changes.object,All_Changes.object_category,All_Changes.object_attrs\
| rename All_Changes.* as *\
| eval src_user=user, dest=dvc\
| search object_attrs="*public:true*"

[Access - Changes made to Main Branch of Repository - Rule]
action.correlationsearch.annotations = {"mitre_attack":["T1199"],"kill_chain_phases":["Exploitation"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Changes made to Main Branch of Repository
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable = 1
action.notable.param.extract_artifacts = {"asset":["dest"],"identity":["src_user"]}
action.notable.param.rule_description = The $commit_branch$ branch of the repository $repo$ had $count$ change(s) by user $src_user$
action.notable.param.rule_title = Changes made to the $commit_branch$ branch of repository $repository_name$
action.notable.param.security_domain = audit
action.notable.param.severity = low
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"","risk_object_type":"","risk_score":1}]
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
alert.suppress = 1
alert.suppress.fields = dest,src_user
alert.suppress.period = 3600s
alert.track = 1
counttype = number of events
cron_schedule = 5 */1 * * *
description = This alert is trigged when a change is made to a repository to make it public
disabled = 1
dispatch.earliest_time = -60min@min
dispatch.latest_time = now
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = | tstats count AS change_count from datamodel=DevOps_Work.Work_Issues where (Work_Issues.commit_branch=main OR Work_Issues.commit_branch=master) groupby Work_Issues.commit_branch,Work_Issues.commit_username,Work_Issues.commit_timestamp,Work_Issues.repository_name,Work_Issues.repository_organization\
| rename Work_Issues.* as *\
| eval _time=commit_timestamp, dest=repository_organization + "/" + repository_name, src_user=commit_username, repo=repository_organization + "/" + repository_name\
| stats sum(change_count) as count max(_time) as last_change by commit_branch,dest,src_user,repo,repository_name

[Access - Risk Notable - Inactive Account in Development Environment - Rule]
action.correlationsearch.annotations = {"mitre_attack":["T1078"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Risk Notable - Inactive Account in Development Environment
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable = 0
action.notable.param.drilldown_name = View usage of previously inactive account $user$
action.notable.param.drilldown_search = | inputlookup last_access_by_user  | `set_threshold_for_new_activity` | eval lastrequest=strptime(last_access, "%Y-%m-%dT%H:%M:%S.%3Q%z"), threshold=relative_time(now(), timethreshold),time=now() | where lastrequest < threshold | eval src_user=if(isnull(user), "unknown", user) | lookup identity_lookup_expanded identity as src_user OUTPUTNEW identity | eval is_unknown=if(src_user="unknown" OR isnull(identity), 1, 0) | search is_unknown=0 |
action.notable.param.extract_artifacts = {"asset":["dvc"],"identity":["src_user"]}
action.notable.param.rule_description = $count$ request(s) were created by a previously inactive user $src_user$
action.notable.param.rule_title = Inactive Account Usage in Dev Environment
action.notable.param.security_domain = access
action.notable.param.severity = informational
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk = 1
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"src_user","risk_object_type":"user","risk_score":5},{"risk_object_field":"dvc","risk_object_type":"system","risk_score":5}]
action.risk.param._risk_message = $src_user$ has not been used recently on repository $dvc$ and new activity may represent risk
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
alert.suppress = 1
alert.suppress.fields = dvc,src_user
alert.suppress.period = 3600s
alert.track = 1
counttype = number of events
cron_schedule = 15 */1 * * *
description = This search will return results of those doing pull requests that are from a known user, but which have not previously accessed the environment in the last threshold defined in the set_threshold_for_new_activity macro
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = | inputlookup last_access_by_user \
| `set_threshold_for_new_activity`\
| eval lastrequest=strptime(last_access, "%Y-%m-%dT%H:%M:%S.%3Q%z"), threshold=relative_time(now(), timethreshold),time=now()\
| where lastrequest < threshold\
| eval src_user=if(isnull(user), "unknown", user)\
| lookup identity_lookup_expanded identity as src_user OUTPUTNEW identity\
| eval is_unknown=if(src_user="unknown" OR isnull(identity), 1, 0)\
| search is_unknown=0\
| stats count values(command) as command values(action) as action by src_user,dvc

[Threat - Risk Threshold Exceeded For Inactive Users Over 24 Hour Period - Rule]
action.correlationsearch.annotations = {"mitre_attack":["T1190"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Risk Threshold Exceeded For Inactive Users Over 24 Hour Period
action.notable = 1
action.notable.param.drilldown_name = View the individual Risk Attributions
action.notable.param.drilldown_search = | from datamodel:"Risk.All_Risk" | search risk_object="$risk_object$" risk_object_type="$risk_object_type$" | `get_correlations` | rename annotations.mitre_attack.mitre_tactic_id as mitre_tactic_id, annotations.mitre_attack.mitre_tactic as mitre_tactic, annotations.mitre_attack.mitre_technique_id as mitre_technique_id, annotations.mitre_attack.mitre_technique as mitre_technique
action.notable.param.extract_artifacts = {"asset":["dest_"],"identity":["user","src_user"]}
action.notable.param.nes_fields = risk_object,risk_object_type
action.notable.param.rule_description = Risk Threshold Exceeded for inactive account usage on repository
action.notable.param.rule_title = 24 hour activity from inactive user risk threshold exceeded
action.notable.param.security_domain = threat
action.notable.param.severity = high
action.notable.param.verbose = 0
action.risk.param._risk = [{"risk_object_field":"","risk_object_type":"","risk_score":1}]
action.risk.param._risk_score = 0
alert.suppress = 1
alert.suppress.fields = risk_object
alert.suppress.period = 43200s
alert.track = 1
counttype = number of events
cron_schedule = */15 * * * *
description = RBA: Risk Threshold exceeded for an object within the previous 24 hours.
disabled = 1
dispatch.earliest_time = -1450m@m
dispatch.latest_time = -10m@m
dispatch.rt_backfill = 1
enableSched = 1
is_visible = 0
quantity = 0
realtime_schedule = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = | tstats `summariesonly` sum(All_Risk.calculated_risk_score) as risk_score, count(All_Risk.calculated_risk_score) as risk_event_count,values(All_Risk.annotations.mitre_attack.mitre_tactic_id) as annotations.mitre_attack.mitre_tactic_id, dc(All_Risk.annotations.mitre_attack.mitre_tactic_id) as mitre_tactic_id_count, values(All_Risk.annotations.mitre_attack.mitre_technique_id) as annotations.mitre_attack.mitre_technique_id, dc(All_Risk.annotations.mitre_attack.mitre_technique_id) as mitre_technique_id_count, values(All_Risk.tag) as tag, dc(source) as source_count from datamodel=Risk.All_Risk by All_Risk.risk_object,All_Risk.risk_object_type,source\
| `drop_dm_object_name("All_Risk")` \
| search source="*Inactive Account in Development Environment*"\
| eval user=if(risk_object_type="user", risk_object, ""),dest=if(risk_object_type="system", risk_object, ""), risk_object=if(risk_object_type="user", "", risk_object), system_type_count=if(risk_object_type="system", risk_event_count, 0)\
| stats sum(system_type_count) as risk_event_count sum(risk_score) as risk_score values(risk_object) as risk_object values(risk_object_type) as risk_object_type values(user) as src_user values(dest) as dest values(annotations*) as annotations* values(mitre*) as mitre* values(source*) as source*\
| eval "annotations.mitre_attack"='annotations.mitre_attack.mitre_technique_id', risk_threshold=30\
| eval risk_object_type=if(risk_object_type="system", "system", risk_object_type)\
| where risk_score >= $risk_threshold$ \
| `get_risk_severity(risk_score)`

[Threat - Risk Threshold Exceeded For Changes in the Main Branch Over 24 Hour Period - Rule]
action.correlationsearch.annotations = {"mitre_attack":["T1190"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Risk Threshold Exceeded For Changes in the Main Branch Over 24 Hour Period
action.notable = 1
action.notable.param.drilldown_name = View the individual Risk Attributions
action.notable.param.drilldown_search = | from datamodel:"Risk.All_Risk" | search risk_object="$risk_object$" risk_object_type="$risk_object_type$" | `get_correlations` | rename annotations.mitre_attack.mitre_tactic_id as mitre_tactic_id, annotations.mitre_attack.mitre_tactic as mitre_tactic, annotations.mitre_attack.mitre_technique_id as mitre_technique_id, annotations.mitre_attack.mitre_technique as mitre_technique
action.notable.param.extract_artifacts = {"asset":["dest_"],"identity":["user","src_user"]}
action.notable.param.nes_fields = risk_object,risk_object_type
action.notable.param.rule_description = Risk Threshold Exceeded for inactive account usage on repository
action.notable.param.rule_title = 24 hour activity from inactive user risk threshold exceeded
action.notable.param.security_domain = threat
action.notable.param.severity = high
action.notable.param.verbose = 0
action.risk.param._risk = [{"risk_object_field":"","risk_object_type":"","risk_score":1}]
action.risk.param._risk_score = 0
alert.suppress = 1
alert.suppress.fields = risk_object
alert.suppress.period = 43200s
alert.track = 1
counttype = number of events
cron_schedule = */15 * * * *
description = RBA: Risk Threshold exceeded for an object within the previous 24 hours.
disabled = 1
dispatch.earliest_time = -1450m@m
dispatch.latest_time = -10m@m
dispatch.rt_backfill = 1
enableSched = 1
is_visible = 0
quantity = 0
realtime_schedule = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = | tstats `summariesonly` sum(All_Risk.calculated_risk_score) as risk_score, count(All_Risk.calculated_risk_score) as risk_event_count,values(All_Risk.annotations.mitre_attack.mitre_tactic_id) as annotations.mitre_attack.mitre_tactic_id, dc(All_Risk.annotations.mitre_attack.mitre_tactic_id) as mitre_tactic_id_count, values(All_Risk.annotations.mitre_attack.mitre_technique_id) as annotations.mitre_attack.mitre_technique_id, dc(All_Risk.annotations.mitre_attack.mitre_technique_id) as mitre_technique_id_count, values(All_Risk.tag) as tag, dc(source) as source_count from datamodel=Risk.All_Risk by All_Risk.risk_object,All_Risk.risk_object_type,source\
| `drop_dm_object_name("All_Risk")` \
| search source="*Inactive Account in Development Environment*"\
| eval user=if(risk_object_type="user", risk_object, ""),dest=if(risk_object_type="system", risk_object, ""), risk_object=if(risk_object_type="user", "", risk_object), system_type_count=if(risk_object_type="system", risk_event_count, 0)\
| stats sum(system_type_count) as risk_event_count sum(risk_score) as risk_score values(risk_object) as risk_object values(risk_object_type) as risk_object_type values(user) as src_user values(dest) as dest values(annotations*) as annotations* values(mitre*) as mitre* values(source*) as source*\
| eval "annotations.mitre_attack"='annotations.mitre_attack.mitre_technique_id', risk_threshold=30\
| eval risk_object_type=if(risk_object_type="system", "system", risk_object_type)\
| where risk_score >= $risk_threshold$ \
| `get_risk_severity(risk_score)`

[Audit - Risk Notable - Changes made to Main Branch of Repository - Rule]
action.correlationsearch.annotations = {"mitre_attack":["T1213.003"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Risk Notable - Changes made to Main Branch of Repository
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable = 0
action.notable.param.extract_artifacts = {"asset":["dest"],"identity":["src_user"]}
action.notable.param.rule_description = The $commit_branch$ branch of the repository $repo$ had $count$ change(s) by user $src_user$
action.notable.param.rule_title = Changes made to the $commit_branch$ branch of repository $repository_name$
action.notable.param.security_domain = audit
action.notable.param.severity = low
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk = 1
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"dest","risk_object_type":"system","risk_score":5},{"risk_object_field":"src_user","risk_object_type":"user","risk_score":5}]
action.risk.param._risk_message = $dest$ has been modified at the main branch level.  Changes to the main branch may introduce security risks to projects.
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
alert.suppress = 1
alert.suppress.fields = dest,src_user
alert.suppress.period = 60s
alert.track = 1
counttype = number of events
cron_schedule = */15 * * * *
description = This alert is trigged when a change is made to a repository to make it public
disabled = 1
dispatch.earliest_time = -15min@min
dispatch.latest_time = now
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = | tstats count AS change_count from datamodel=DevOps_Work.Work_Issues where (Work_Issues.commit_branch=main OR Work_Issues.commit_branch=master) groupby Work_Issues.commit_branch,Work_Issues.commit_username,Work_Issues.commit_timestamp,Work_Issues.repository_name,Work_Issues.repository_organization\
| rename Work_Issues.* as *\
| eval _time=commit_timestamp, dest=repository_organization + "/" + repository_name, src_user=commit_username, repo=repository_organization + "/" + repository_name\
| stats sum(change_count) as count max(_time) as last_change by commit_branch,dest,src_user,repo,repository_name

[Audit - Mass Deletion of Repositories - Rule]
action.correlationsearch.annotations = {"mitre_attack":["T1485"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Mass Deletion of Repositories
action.customsearchbuilder.enabled = false
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable = 1
action.notable.param.extract_artifacts = {"asset":["dest"],"identity":["src_user"]}
action.notable.param.rule_description = $count$ deletion(s) were detected on repository $repository$ by user $src_user$
action.notable.param.rule_title = Mass Deletion of Repositories Activity Detected
action.notable.param.security_domain = audit
action.notable.param.severity = medium
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"","risk_object_type":"","risk_score":1}]
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
alert.suppress = 1
alert.suppress.fields = repository
alert.suppress.period = 43200s
alert.track = 1
counttype = number of events
cron_schedule = 5 */1 * * *
description = This search monitors for deletion of repositories and when they exceed the upper bounds.  The number of standard deviations can be modified
disabled = 1
dispatch.earliest_time = -7d
dispatch.latest_time = now
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = | makeresults count=7 ```used to generate results for each day```\
| streamstats count \
| eval _time=_time - (count * 86400) \
| bin _time span=1d \
| eval count=0 \
| append ```get deleted events ```\
    [| tstats summariesonly=true count from datamodel=Change.All_Changes where (All_Changes.action="deleted") (All_Changes.object_category="repository") by _time,All_Changes.object_path,All_Changes.object,All_Changes.user span=1d \
    | rename All_Changes.* as * \
    | fields _time,count, object_path, object, user ] \
| stats sum(count) as count values(object_path) as repository values(object) as dest values(user) as user by _time\
| sort -_time\
| filldown repository,dest,user\
| eventstats avg(count) as avg stdev(count) as stdev by repository,user  ```calculate standard deviation and average for outlier detection```\
| eval stdev_threshold=2, min_events=3\
| eval upperBound=avg + stdev*stdev_threshold  \
| where count > upperBound AND count > min_events\
| eval src_user=user\
| fields _time,count,dest,src_user,repository

[Threat - Risk Threshold Exceeded For Alerts on DevSecOps Asset - Rule]
action.correlationsearch.annotations = {"mitre_attack":[]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Risk Threshold Exceeded For Alerts on DevSecOps Asset
action.notable = 1
action.notable.param.drilldown_name = View the individual Risk Attributions
action.notable.param.drilldown_search = | tstats `summariesonly` sum(All_Risk.calculated_risk_score) as risk_score, count(All_Risk.calculated_risk_score) as risk_event_count,values(All_Risk.annotations.mitre_attack.mitre_tactic_id) as annotations.mitre_attack.mitre_tactic_id, dc(All_Risk.annotations.mitre_attack.mitre_tactic_id) as mitre_tactic_id_count, values(All_Risk.annotations.mitre_attack.mitre_technique_id) as annotations.mitre_attack.mitre_technique_id, dc(All_Risk.annotations.mitre_attack.mitre_technique_id) as mitre_technique_id_count, values(All_Risk.tag) as tag, dc(source) as source_count from datamodel=Risk.All_Risk by All_Risk.risk_object,All_Risk.risk_object_type,source | `drop_dm_object_name("All_Risk")`  | search source="*Risk Notable - DevSecOps Alert*" risk_object!="Internet" risk_object_type="system"
action.notable.param.extract_artifacts = {"asset":["dest_","dvc","src"],"identity":["user","src_user"]}
action.notable.param.nes_fields = risk_object,risk_object_type
action.notable.param.rule_description = Risk Threshold Exceeded for Development Repository over last 24 Hours
action.notable.param.rule_title = 24 hour activity from development threshold exceeded
action.notable.param.security_domain = threat
action.notable.param.severity = high
action.notable.param.verbose = 0
action.risk.param._risk = [{"risk_object_field":"","risk_object_type":"","risk_score":1}]
action.risk.param._risk_score = 0
alert.suppress = 1
alert.suppress.fields = risk_object
alert.suppress.period = 43200s
alert.track = 1
counttype = number of events
cron_schedule = */15 * * * *
description = RBA: Risk Threshold exceeded for a development asset within the previous 24 hours.
disabled = 1
dispatch.earliest_time = -1450m@m
dispatch.latest_time = -10m@m
dispatch.rt_backfill = 1
enableSched = 1
is_visible = 0
quantity = 0
realtime_schedule = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = | tstats `summariesonly` sum(All_Risk.calculated_risk_score) as risk_score, count(All_Risk.calculated_risk_score) as risk_event_count,values(All_Risk.annotations.mitre_attack.mitre_tactic_id) as annotations.mitre_attack.mitre_tactic_id, dc(All_Risk.annotations.mitre_attack.mitre_tactic_id) as mitre_tactic_id_count, values(All_Risk.annotations.mitre_attack.mitre_technique_id) as annotations.mitre_attack.mitre_technique_id, dc(All_Risk.annotations.mitre_attack.mitre_technique_id) as mitre_technique_id_count, values(All_Risk.tag) as tag, dc(source) as source_count from datamodel=Risk.All_Risk by All_Risk.risk_object,All_Risk.risk_object_type,source\
| `drop_dm_object_name("All_Risk")` \
| search source="*Risk Notable - DevSecOps Alert*" risk_object!="Internet" risk_object_type="system"\
| stats sum(risk_event_count) as risk_event_count sum(risk_score) as risk_score values(risk_object) as risk_object values(risk_object_type) as risk_object_type values(user) as src values(dest) as dest values(annotations*) as annotations* values(mitre*) as mitre* values(source*) as source*\
| eval "annotations.mitre_attack"='annotations.mitre_attack.mitre_technique_id', risk_threshold=120\
| where risk_score >= $risk_threshold$ \
| `get_risk_severity(risk_score)`

[Audit - VPC Flows are not logging or not configured - Rule]
action.correlationsearch.annotations = {"mitre_attack":["T1562.008"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = VPC Flows are not logging or not configured
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable = 1
action.notable.param.drilldown_search = `aws_indexes` sourcetype="aws:cloudwatchlogs:vpcflow" dest=$dest$ | stats  latest(_time) as lastTime by host | `aws_vpcflow_log_timeout_filter(lastTime)` | convert ctime(lastTime)
action.notable.param.extract_artifacts = {"asset":["dest"],"identity":[]}
action.notable.param.recommended_actions = email,ssg_mobile_alert
action.notable.param.rule_description = $dest$ is not sending VPC Flow logs to Splunk since in the last $threshold$ hour(s).
action.notable.param.rule_title = VPC Flow Logs have not logged in more than $threshold$ hour(s) or is disabled
action.notable.param.security_domain = audit
action.notable.param.severity = medium
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk = 1
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"dest","risk_object_type":"system","risk_score":10}]
action.risk.param._risk_message = Disabled VPC Flow logging can be used to obfuscate activity on a host target
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = dest
alert.suppress.period = 86400s
alert.track = 1
counttype = number of events
cron_schedule = 5 */1 * * *
description = This error triggers when AWS VPC Flow logs are not currently being logged to Splunk and are expected past a certain time threshold
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = `aws_indexes` sourcetype="aws:cloudwatchlogs:vpcflow" \
| stats  latest(_time) as lastTime by dest\
| `aws_vpcflow_log_timeout_filter(lastTime)`\
| convert ctime(lastTime) ```TEST ONLY``` | search dest="104.131.155.175"

[Audit - Cloudtrail is not logging or not configured - Rule]
action.correlationsearch.annotations = {"mitre_attack":["T1562.008"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Cloudtrail is not logging or not configured
action.customsearchbuilder.enabled = false
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable = 1
action.notable.param.drilldown_search = `aws_indexes` sourcetype="aws:cloudwatch" host=$host$ | stats  latest(_time) as lastTime by host | `aws_cloudwatch_log_timeout_filter(lastTime)` | convert ctime(lastTime)
action.notable.param.extract_artifacts = {"asset":["orig_host","host"],"identity":[]}
action.notable.param.recommended_actions = email,ssg_mobile_alert
action.notable.param.rule_description = $host$ is not sending logs to Splunk since in the last $threshold$ hour(s).
action.notable.param.rule_title = Cloudtrail has not logged in more than $threshold$ hours or is disabled
action.notable.param.security_domain = audit
action.notable.param.severity = medium
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk = 1
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"host","risk_object_type":"system","risk_score":10}]
action.risk.param._risk_message = Disabled cloudtrail logging can be used to obfuscate activity on a host target
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = host
alert.suppress.period = 86400s
alert.track = 1
counttype = number of events
cron_schedule = 5 */1 * * *
description = This error triggers when AWS Cloudtrail logs are not currently being logged to Splunk and are expected past a certain time threshold
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = `cloudtrail`\
| stats  latest(_time) as lastTime by host\
| `aws_cloudwatch_log_timeout_filter(lastTime)`\
| convert ctime(lastTime)

[Threat - Defense Evasion Delete Monitoring Log Group - Rule]
action.correlationsearch.annotations = {"cis20":["3","5","16"],"kill_chain_phases":["Action on Object"],"mitre_attack":["T1562.008","T1562"],"nist":["DE.CIM"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Defense Evasion Delete Monitoring Log Group
action.customsearchbuilder.enabled = false
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable = 1
action.notable.param.drilldown_name = View Log Group Deletions
action.notable.param.drilldown_search = | tstats summariesonly=true min("_time") as "firstTime",max("_time") as "lastTime" from datamodel="Change"."All_Changes" where `defense_evasion_delete_log_group_filter` AND All_Changes.action="deleted" AND All_Changes.user=$user$ by "All_Changes.user","All_Changes.dvc","All_Changes.dest","All_Changes.object","All_Changes.vendor_product", "All_Changes.vendor_account"  | rename All_Changes.* as *  | convert ctime(firstTime) ctime(lastTime)
action.notable.param.extract_artifacts = {"asset":["src","dest","dvc","orig_host"],"identity":["user","vendor_account"]}
action.notable.param.rule_description = User $user$ has deleted a logging group on $dvc$ - group $object$
action.notable.param.rule_title = Security Log Group Deleted
action.notable.param.security_domain = threat
action.notable.param.severity = high
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk = 1
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"user","risk_object_type":"user","risk_score":10},{"risk_object_field":"vendor_account","risk_object_type":"user","risk_score":5},{"risk_object_field":"object","risk_object_type":"host_artifacts","risk_score":10},{"risk_object_field":"dest","risk_object_type":"system","risk_score":10}]
action.risk.param._risk_message = User $user$ has deleted a logging group on $dvc$ - group $object$
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
action.webhook.enable_allowlist = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */15 * * * *
description = Attackers may evade the logging capability by deleting the log group for services. This will stop sending the logs and metrics to Splunk.
disabled = 1
dispatch.earliest_time = -15min@min
dispatch.latest_time = @min
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = | tstats summariesonly=true min("_time") as "firstTime",max("_time") as "lastTime" from datamodel="Change"."All_Changes" where `defense_evasion_delete_log_group_filter` AND All_Changes.action="deleted" by "All_Changes.user","All_Changes.dvc","All_Changes.dest","All_Changes.object","All_Changes.vendor_product", "All_Changes.vendor_account" \
| rename All_Changes.* as * \
| convert ctime(firstTime) ctime(lastTime)

[Threat - Abnormally High Number of Instances Launched by User - Rule]
action.correlationsearch.annotations = {"mitre_attack":["T1078.004"],"kill_chain_phases":["Actions on Objectives"],"cis20":["13"],"nist":["DE.DP","DE.AE"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Abnormally High Number of Instances Launched by User
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable = 1
action.notable.param.drilldown_search = `cloudtrail` eventName=RunInstances errorCode=success  userName=$userName$
action.notable.param.extract_artifacts = {"asset":["orig_host"],"identity":["userName"]}
action.notable.param.rule_description = $instances_launched$ Instances Launched by $userName$
action.notable.param.rule_title = Abonormally High Number of Instances Launched
action.notable.param.security_domain = threat
action.notable.param.severity = low
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk = 1
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"user","risk_object_type":"user","risk_score":10}]
action.risk.param._risk_message = $instances_launched$ Instances Launched by $userName$ which can be an indicator of activities like Cryptomining
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
action.webhook.enable_allowlist = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = 5 */1 * * *
description = This search looks for AWS CloudTrail events where a user successfully launches an abnormally high number of instances.
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = | tstats summariesonly=true count as instances_launched from datamodel="Change"."All_Changes" where `launch_instances_filter` by "All_Changes.user","All_Changes.dvc","All_Changes.dest","All_Changes.object","All_Changes.vendor_product", "All_Changes.vendor_account", All_Changes.command, _time span=10min\
| rename All_Changes.* as * \
| eventstats avg(instances_launched) as total_launched_avg, stdev(instances_launched) as total_launched_stdev\
| eval threshold_value = 4 \
| eval isOutlier=if(instances_launched > total_launched_avg+(total_launched_stdev * threshold_value), 1, 0) \
| eval num_standard_deviations_away = round(abs(instances_launched - total_launched_avg) / total_launched_stdev, 2) \
| search isOutlier=1 AND _time >= relative_time(now(), "-10m@m") \
| table isOutlier, _time, user, dvc, dest, object, vendor_account, vendor_product, instances_launched, num_standard_deviations_away, total_launched_avg, total_launched_stdev\
| `abnormally_high_instances_launched_by_user_filter`

[Audit - Defense Evasion Impair Security Services - Rule]
action.correlationsearch.annotations = {"mitre_attack":["T1562.008"],"kill_chain_phases":["Action on Objectives"],"cis20":["3","5","16"],"nist":["DE.CIM"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Defense Evasion Impair Security Services
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable = 1
action.notable.param.drilldown_name = View Configurations Deleted
action.notable.param.drilldown_search = | tstats summariesonly=true min("_time") as "firstTime",max("_time") as "lastTime" from datamodel="Change"."All_Changes" where `defense_evasion_impair_security_services_filter` AND All_Changes.action="deleted" AND "All_Changes.user"=$user$ by "All_Changes.dest","All_Changes.dvc","All_Changes.object","All_Changes.src","All_Changes.user","All_Changes.vendor_product","All_Changes.vendor_account"  | rename All_Changes.* as * | convert ctime(firstTime) ctime(lastTime)
action.notable.param.extract_artifacts = {"asset":["src","dest","dvc"],"identity":["user","vendor_account"]}
action.notable.param.rule_description = User $user$ has deleted security log settings on $dvc$ for object $object$
action.notable.param.rule_title = Security Logging Settings Disabled on $dvc$
action.notable.param.security_domain = audit
action.notable.param.severity = medium
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk = 1
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"user","risk_object_type":"user","risk_score":10},{"risk_object_field":"dvc","risk_object_type":"system","risk_score":10}]
action.risk.param._risk_message = User $user$ has made potentially risky api calls $command$ that could impair security services on $dvc$
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */15 * * * *
description = This looks for delete specific calls made to monitoring services.  These can be used to weaken security defenses by deleting logging configurations in the service.
disabled = 1
dispatch.earliest_time = -15min@min
dispatch.latest_time = @min
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = | tstats summariesonly=true min("_time") as "firstTime",max("_time") as "lastTime" from datamodel="Change"."All_Changes" where `defense_evasion_impair_security_services_filter` AND All_Changes.action="deleted" by "All_Changes.dest","All_Changes.dvc","All_Changes.object","All_Changes.src","All_Changes.user","All_Changes.vendor_product","All_Changes.vendor_account" \
| rename All_Changes.* as *\
| convert ctime(firstTime) ctime(lastTime)

[Access - Risk Notable - DevSecOps Alert - Rule]
action.correlationsearch.annotations = {"mitre_attack":[]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Risk Notable - DevSecOps Alert
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable = 1
action.notable.param.extract_artifacts = {"asset":["dvc","src","dest"],"identity":["user"]}
action.notable.param.rule_description = $signature$ - $vendor_product$ alert received on $dvc$ with severity $severity$
action.notable.param.rule_title = $signature$
action.notable.param.security_domain = threat
action.notable.param.severity = high
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk = 1
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"dvc","risk_object_type":"system","risk_score":10},{"risk_object_field":"user","risk_object_type":"user","risk_score":5},{"risk_object_field":"src","risk_object_type":"system","risk_score":5},{"risk_object_field":"dest","risk_object_type":"system","risk_score":5}]
action.risk.param._risk_message = $signature$ $severity$ severity alert received for device $dvc$
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
alert.suppress = 1
alert.suppress.fields = dvc,signature,src,user
alert.suppress.period = 21600s
alert.track = 1
counttype = number of events
cron_schedule = 5 */1 * * *
description = This search pulls any DevSecOps alerts from the IDS data model and displays them here.  What items get included in this search can be adjusted by updating the `filter_devsecops_notables` macro.
disabled = 1
dispatch.earliest_time = -60min
dispatch.latest_time = now
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = | tstats count as event_count from datamodel=Intrusion_Detection where IDS_Attacks.action="allowed" by _time,IDS_Attacks.user,IDS_Attacks.dvc,IDS_Attacks.signature,IDS_Attacks.vendor_product,IDS_Attacks.severity,IDS_Attacks.src\
| rename IDS_Attacks.* as *\
| search `devsecops_notables_filter`\
| eval src=if(src="unknown", "", src), user=if(user="unknown", "", user)\
| bin _time span=1min\
| fillnull dvc,src,dest,user value=""\
| stats list(dvc) as dvc list(src) as src list(dest) as dest list(user) as user by signature,severity,vendor_product\
| eval dvc=mvdedup(dvc), src=mvdedup(src), dest=mvdedup(dest)\
| eval tag=devsecops

[Threat - Risk Threshold Exceeded For Development Users Over 24 Hour Period - Rule]
action.correlationsearch.annotations = {"mitre_attack":[]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Risk Threshold Exceeded For Development Users Over 24 Hour Period
action.notable = 1
action.notable.param.drilldown_name = View the individual Risk Attributions
action.notable.param.drilldown_search = | from datamodel:"Risk.All_Risk" | search risk_object="$risk_object$" risk_object_type="system" | `get_correlations` | rename annotations.mitre_attack.mitre_tactic_id as mitre_tactic_id, annotations.mitre_attack.mitre_tactic as mitre_tactic, annotations.mitre_attack.mitre_technique_id as mitre_technique_id, annotations.mitre_attack.mitre_technique as mitre_technique | eval rule_name=if(isnotnull(signature), signature, rule_name)
action.notable.param.extract_artifacts = {"asset":["dest_","dvc"],"identity":["user","src_user"]}
action.notable.param.nes_fields = risk_object,risk_object_type
action.notable.param.rule_description = Risk Threshold Exceeded for development account usage on repository
action.notable.param.rule_title = 24 hour activity from development user risk threshold exceeded
action.notable.param.security_domain = threat
action.notable.param.severity = high
action.notable.param.verbose = 0
action.risk.param._risk = [{"risk_object_field":"","risk_object_type":"","risk_score":1}]
action.risk.param._risk_score = 0
alert.suppress = 1
alert.suppress.fields = risk_object
alert.suppress.period = 43200s
alert.track = 1
counttype = number of events
cron_schedule = */15 * * * *
description = RBA: Risk Threshold exceeded for an user object within the previous 24 hours.
disabled = 1
dispatch.earliest_time = -1450m@m
dispatch.latest_time = -10m@m
dispatch.rt_backfill = 1
enableSched = 1
is_visible = 0
quantity = 0
realtime_schedule = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = | tstats `summariesonly` sum(All_Risk.calculated_risk_score) as risk_score, count(All_Risk.calculated_risk_score) as risk_event_count,values(All_Risk.annotations.mitre_attack.mitre_tactic_id) as annotations.mitre_attack.mitre_tactic_id, dc(All_Risk.annotations.mitre_attack.mitre_tactic_id) as mitre_tactic_id_count, values(All_Risk.annotations.mitre_attack.mitre_technique_id) as annotations.mitre_attack.mitre_technique_id, dc(All_Risk.annotations.mitre_attack.mitre_technique_id) as mitre_technique_id_count, values(All_Risk.tag) as tag, dc(source) as source_count from datamodel=Risk.All_Risk by All_Risk.risk_object,All_Risk.risk_object_type,source\
| `drop_dm_object_name("All_Risk")` \
| search source="*Risk Notable - DevSecOps Alert*" risk_object!="Internet" risk_object_type="user"\
| stats sum(risk_event_count) as risk_event_count sum(risk_score) as risk_score values(risk_object_type) as risk_object_type values(src) as src values(dest) as dest values(annotations*) as annotations* values(mitre*) as mitre* values(source*) as source* by risk_object\
| eval user=risk_object, "annotations.mitre_attack"='annotations.mitre_attack.mitre_technique_id', risk_threshold=100\
| where risk_score >= $risk_threshold$ \
| `get_risk_severity(risk_score)`\
| eval tag=devsecops

[Threat - Risk Threshold Exceeded For Development Asset Over 24 Hour Period - Rule]
action.correlationsearch.annotations = {"mitre_attack":[]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Risk Threshold Exceeded For Development Asset Over 24 Hour Period
action.notable = 1
action.notable.param.drilldown_name = View the individual Risk Attributions
action.notable.param.drilldown_search = | from datamodel:"Risk.All_Risk" | search risk_object="$risk_object$" risk_object_type="system" | `get_correlations` | rename annotations.mitre_attack.mitre_tactic_id as mitre_tactic_id, annotations.mitre_attack.mitre_tactic as mitre_tactic, annotations.mitre_attack.mitre_technique_id as mitre_technique_id, annotations.mitre_attack.mitre_technique as mitre_technique | eval rule_name=if(isnotnull(signature), signature, rule_name)
action.notable.param.extract_artifacts = {"asset":["dest_","dvc","src","risk_object"],"identity":["user","src_user"]}
action.notable.param.nes_fields = risk_object,risk_object_type
action.notable.param.rule_description = Risk Threshold Exceeded for Development Repository over last 24 Hours
action.notable.param.rule_title = 24 hour activity from development threshold exceeded
action.notable.param.security_domain = threat
action.notable.param.severity = high
action.notable.param.verbose = 0
action.risk.param._risk = [{"risk_object_field":"","risk_object_type":"","risk_score":1}]
action.risk.param._risk_score = 0
alert.suppress = 1
alert.suppress.fields = risk_object
alert.suppress.period = 43200s
alert.track = 1
counttype = number of events
cron_schedule = 30 */1 * * *
description = RBA: Risk Threshold exceeded for a development asset within the previous 24 hours.
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
dispatch.rt_backfill = 1
enableSched = 1
is_visible = 0
quantity = 0
realtime_schedule = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = | tstats `summariesonly` sum(All_Risk.calculated_risk_score) as risk_score, count(All_Risk.calculated_risk_score) as risk_event_count,values(All_Risk.annotations.mitre_attack.mitre_tactic_id) as annotations.mitre_attack.mitre_tactic_id, dc(All_Risk.annotations.mitre_attack.mitre_tactic_id) as mitre_tactic_id_count, values(All_Risk.annotations.mitre_attack.mitre_technique_id) as annotations.mitre_attack.mitre_technique_id, dc(All_Risk.annotations.mitre_attack.mitre_technique_id) as mitre_technique_id_count, values(All_Risk.tag) as tag, dc(source) as source_count from datamodel=Risk.All_Risk by All_Risk.risk_object,All_Risk.risk_object_type,source\
| `drop_dm_object_name("All_Risk")` \
| search source="*Risk Notable - DevSecOps Alert*" risk_object!="Internet" risk_object_type="system", risk_object!="unknown"\
| stats sum(risk_event_count) as risk_event_count sum(risk_score) as risk_score values(risk_object_type) as risk_object_type values(user) as src values(dest) as dest values(annotations*) as annotations* values(mitre*) as mitre* values(source*) as source* by risk_object\
| eval dvc=risk_object, "annotations.mitre_attack"='annotations.mitre_attack.mitre_technique_id', risk_threshold=100\
| where risk_score >= $risk_threshold$ \
| `get_risk_severity(risk_score)`

[Access - Network ACL's Changed - Rule]
action.correlationsearch.annotations = {"mitre_attack":["T1562.007"],"kill_chain_phases":["Actions on Objectives"],"cis20":["11"],"nist":["DE.DP","DE.AE"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Network ACL's Changed
action.customsearchbuilder.enabled = false
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable = 1
action.notable.param.drilldown_name = View ACL Modification Events
action.notable.param.drilldown_search = | tstats count from datamodel=Change where `network_acl_change_filter` AND All_Changes.dvc=$dvc$ AND All_Changes.dest=$dest$ AND All_Changes.user=$user$ by _time,All_Changes.action, All_Changes.command, All_Changes.change_type, All_Changes.dest, All_Changes.dvc, All_Changes.src, All_Changes.user, All_Changes.object, All_Changes.object_attrs,  All_Changes.object_category, All_Changes.object_id span=1min | rename All_Changes.* as *
action.notable.param.extract_artifacts = {"asset":["src","dest","dvc","orig_host"],"identity":["user"]}
action.notable.param.rule_description = $total$ changes were made to Network ACL's on host $dest$  by user $user$
action.notable.param.rule_title = Change to Network ACL detected on Host
action.notable.param.security_domain = access
action.notable.param.severity = low
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk = 1
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"dest","risk_object_type":"system","risk_score":5},{"risk_object_field":"dvc","risk_object_type":"system","risk_score":5}]
action.risk.param._risk_message = Modification of a host's Network ACL's can be leveraged to grant additional access to hosts that is unapproved
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = 15 */1 * * *
description = This rule files when a network ACV had been created, modified, or deleted.  Changes to Network ACL's can be used to grant addition access to resources.
disabled = 1
dispatch.earliest_time = -1h
dispatch.latest_time = now
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = | tstats count from datamodel=Change where `network_acl_change_filter` by _time,All_Changes.action, All_Changes.command, All_Changes.change_type, All_Changes.dest, All_Changes.dvc, All_Changes.src, All_Changes.user, All_Changes.object, All_Changes.object_attrs,  All_Changes.object_category, All_Changes.object_id span=1min\
| rename All_Changes.* as *\
| stats max(_time) as lastChange min(_time) as firstChange count as total values(action) as action values(command) as command values(object_attrs) as object_attrs values(object_category) as object_category values(object_id) as object_id, by dvc,dest,src,user,object\
| convert ctime(lastChange)\
| convert ctime(firstChange)

[Audit - AWS Defense Evasion Delete CloudWatch Log Group - Rule]
action.correlationsearch.annotations = {"mitre_attack":["T1562.008","T1562"],"kill_chain_phases":["Action on Objectives"],"cis20":["3","5","16"],"nist":["DE.CIM"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = AWS Defense Evasion Delete CloudWatch Log Group
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable = 1
action.notable.param.drilldown_name = View Activity
action.notable.param.drilldown_search = `cloudtrail` eventName=DeleteLogGroup eventSource=logs.amazonaws.com userAgent!=console.amazonaws.com errorCode=success src=$src$
action.notable.param.extract_artifacts = {"asset":["src","orig_host"],"identity":["user_arn","aws_account_id"]}
action.notable.param.rule_description = User $user_arn$ has deleted a CloudWatch logging group for account id $aws_account_id$ from IP $src$
action.notable.param.rule_title = CloudWatch Security Log Group Deleted
action.notable.param.security_domain = audit
action.notable.param.severity = medium
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk = 1
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"user_arn","risk_object_type":"user","risk_score":10},{"risk_object_field":"aws_account_id","risk_object_type":"user","risk_score":10},{"risk_object_field":"src","risk_object_type":"system","risk_score":5}]
action.risk.param._risk_message = User $user_arn$ has deleted a CloudWatch logging group for account id $aws_account_id$ from IP $src$
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
action.webhook.enable_allowlist = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */15 * * * *
description = Attackers may evade the logging capability by deleting the log group in CloudWatch. This will stop sending the logs and metrics to CloudWatch. When the adversary has the right type of permissions within the compromised AWS environment, they may delete the CloudWatch log group that is logging activities in the environment.
disabled = 1
dispatch.earliest_time = -15min@min
dispatch.latest_time = @min
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = `cloudtrail` eventName=DeleteLogGroup eventSource=logs.amazonaws.com userAgent!=console.amazonaws.com errorCode = success\
| stats count min(_time) as firstTime max(_time) as lastTime values(requestParameters.logGroupName) as log_group_name by src region eventName userAgent user_arn aws_account_id\
| `aws_defense_evasion_delete_cloudwatch_log_group_filter`

[Audit - AWS Defense Evasion Impair Security Services - Rule]
action.correlationsearch.annotations = {"mitre_attack":["T1562.008"],"kill_chain_phases":["Action on Objectives"],"cis20":["3","5","16"],"nist":["DE.CIM"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = AWS Defense Evasion Impair Security Services
action.customsearchbuilder.enabled = false
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable = 1
action.notable.param.drilldown_name = View Configurations Modified
action.notable.param.drilldown_search = `cloudtrail` eventName IN ("DeleteLogStream","DeleteDetector","DeleteIPSet","DeleteWebACL","DeleteRule","DeleteRuleGroup","DeleteLoggingConfiguration","DeleteAlarms")
action.notable.param.extract_artifacts = {"asset":["src","orig_host"],"identity":["user_arn","aws_account_id"]}
action.notable.param.rule_description = User $user_arn$ has deleted security log settings for account id $aws_account_id$.
action.notable.param.rule_title = Critical Securtity Logging Settings Disabled
action.notable.param.security_domain = audit
action.notable.param.severity = medium
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk = 1
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"user_arn","risk_object_type":"user","risk_score":10},{"risk_object_field":"aws_account_id","risk_object_type":"user","risk_score":10}]
action.risk.param._risk_message = User $user_arn$ has made potentially risky api calls $eventName$ that could impair AWS security services for account id $aws_account_id$
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
action.webhook.enable_allowlist = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */15 * * * *
description = This looks for delete specific calls made to CloudWatch.  These can be used to weaken secyruty defenses by deleting logging configurations in CloudWatch.
disabled = 1
dispatch.earliest_time = -15min@min
dispatch.latest_time = @min
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = `cloudtrail` eventName IN ("DeleteLogStream","DeleteDetector","DeleteIPSet","DeleteWebACL","DeleteRule","DeleteRuleGroup","DeleteLoggingConfiguration","DeleteAlarms") \
| stats count min(_time) as firstTime max(_time) as lastTime values(eventName) as eventName values(eventSource) as eventSource values(requestParameters.*) as * by src region user_arn aws_account_id user_type user_agent errorCode\
| `aws_defense_evasion_impair_security_services_filter`

[Threat - Abnormally High AWS Instances Launched by User - Rule]
action.correlationsearch.annotations = {"mitre_attack":["T1078.004"],"kill_chain_phases":["Actions on Objectives"],"cis20":["13"],"nist":["DE.DP","DE.AE"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Abnormally High AWS Instances Launched by User
action.customsearchbuilder.enabled = false
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable = 1
action.notable.param.drilldown_search = `cloudtrail` eventName=RunInstances errorCode=success  userName=$userName$
action.notable.param.extract_artifacts = {"asset":["orig_host"],"identity":["userName"]}
action.notable.param.rule_description = $instances_launched$ AWS Instances Launched by $userName$
action.notable.param.rule_title = Abonormally High Number of AWS Instances Launched
action.notable.param.security_domain = threat
action.notable.param.severity = high
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"","risk_object_type":"","risk_score":1}]
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
action.webhook.enable_allowlist = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = 5 */1 * * *
description = This search looks for AWS CloudTrail events where a user successfully launches an abnormally high number of instances.
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
search = `cloudtrail` eventName=RunInstances errorCode=success \
| bucket span=10m _time \
| stats count AS instances_launched by _time userName \
| eventstats avg(instances_launched) as total_launched_avg, stdev(instances_launched) as total_launched_stdev\
| eval threshold_value = 4 \
| eval isOutlier=if(instances_launched > total_launched_avg+(total_launched_stdev * threshold_value), 1, 0) \
| search isOutlier=1 AND _time >= relative_time(now(), "-10m@m") \
| eval num_standard_deviations_away = round(abs(instances_launched - total_launched_avg) / total_launched_stdev, 2) \
| table _time, userName, instances_launched, num_standard_deviations_away, total_launched_avg, total_launched_stdev\
| `abnormally_high_aws_instances_launched_by_user_filter`

[Threat - Secret Leakage Found - Rule]
action.correlationsearch.annotations = {"mitre_attack":["T1195.002"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Secret leakage found
action.keyindicator.invert = 0
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable = 1
action.notable.param.drilldown_name = View Detected Secrets
action.notable.param.drilldown_search = | pivot Code_Vulnerabilities Coding_Vulnerabilities latest(_time) AS "_time"  SPLITROW dest SPLITROW category SPLITROW repository_name SPLITROW signature SPLITROW organization SPLITROW xref SPLITROW severity | `code_alert_filter`
action.notable.param.extract_artifacts = {"asset":["dest"],"identity":["user"],"url":["dest"]}
action.notable.param.next_steps = {"version":1,"data":""}
action.notable.param.recommended_actions = email,risk
action.notable.param.rule_description = $total_vulnerabilities$ secrets detected in repository $repository_name$
action.notable.param.rule_title = Secret Found in Code Repository
action.notable.param.security_domain = threat
action.notable.param.severity = high
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk = 1
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"repository_name","risk_object_type":"host_artifacts","risk_score":2},{"risk_object_field":"dest","risk_object_type":"system","risk_score":1},{"risk_object_field":"xref","risk_object_type":"other","risk_score":5}]
action.risk.param._risk_message = Secret leakage represents a risk to users and customers
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = dest,repository_name,organization
alert.suppress.period = 43200s
alert.track = 1
counttype = number of events
cron_schedule = 5 */1 * * *
description = This search looks for Secret Leakage Alerts in Development
disabled = 1
dispatch.earliest_time = -7d
dispatch.latest_time = now
dispatch.rt_backfill = 1
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
request.ui_dispatch_view = search
search = | tstats summariesonly=false latest(_time) AS _time from datamodel=Code_Vulnerabilities.Secret_Vulnerabilities by Secret_Vulnerabilities.category,Secret_Vulnerabilities.dest,Secret_Vulnerabilities.repository_name,Secret_Vulnerabilities.secret_type,Secret_Vulnerabilities.organization,Secret_Vulnerabilities.severity, Secret_Vulnerabilities.xref, Secret_Vulnerabilities.action\
| rename "Secret_Vulnerabilities.*" as * \
| stats count as total_vulnerabilities max(_time) as _time latest(action) as status values(xref) as xref values(secret_type) as secret_type values(severity) as severity by dest,repository_name,organization\
| search status="created"